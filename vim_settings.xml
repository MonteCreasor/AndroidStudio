<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks>
      <mark key="P" line="66" column="0" filename="$USER_HOME$/doug/WebCrawler/image-crawler/src/main/java/edu/vanderbilt/crawlers/framework/ImageCrawlerBase.java" protocol="file" />
      <mark key="R" line="64" column="8" filename="$USER_HOME$/40au/examples/MyApp/app/src/main/java/apps/monte/myapplication/LineView.java" protocol="file" />
      <mark key="T" line="953" column="16" filename="$USER_HOME$/.gradle/caches/modules-2/files-2.1/io.apptik.widget/multislider/1.3/783ba5d8cd73e829ff38c9b35d35f4599f8938a5/multislider-1.3-sources.jar!/io/apptik/widget/MultiSlider.java" protocol="file" />
      <mark key="J" line="300" column="0" filename="$USER_HOME$/mooc2/downloader/app/src/main/java/vandy/mooc/assignments/framework/utils/UriUtils.java" protocol="file" />
    </globalmarks>
    <filemarks>
      <file name="$USER_HOME$/android/samples/architecture/u2020/src/internalDebug/res/values/debug_styles.xml" timestamp="1529901631740">
        <mark key="[" line="12" column="0" />
        <mark key="]" line="12" column="74" />
        <mark key="." line="18" column="0" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/settings/SettingsActivity.kt" timestamp="1529889445165">
        <mark key="[" line="7" column="0" />
        <mark key="]" line="7" column="0" />
        <mark key="." line="7" column="0" />
      </file>
      <file name="$USER_HOME$/android/samples/architecture/u2020/src/main/res/values/styles.xml" timestamp="1529892023084" />
      <file name="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/data/ApiEndpoint.kt" timestamp="1529809537200">
        <mark key="[" line="13" column="0" />
        <mark key="]" line="13" column="0" />
        <mark key="." line="13" column="0" />
        <mark key="^" line="12" column="15" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/DebugMainActivity.kt" timestamp="1529901498833">
        <mark key="[" line="21" column="0" />
        <mark key="]" line="21" column="0" />
        <mark key="." line="21" column="0" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/dev/res/layout/settings_dialog_fragment.xml" timestamp="1529892411128">
        <mark key="a" line="85" column="5" />
        <mark key="'" line="73" column="4" />
        <mark key="[" line="72" column="0" />
        <mark key="]" line="72" column="42" />
        <mark key="^" line="148" column="41" />
        <mark key="." line="72" column="0" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/main/res/values/styles.xml" timestamp="1529891753278">
        <mark key="[" line="21" column="0" />
        <mark key="]" line="21" column="0" />
        <mark key="^" line="16" column="77" />
        <mark key="." line="21" column="0" />
      </file>
      <file name="/fragment.kt" timestamp="1529700074852">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/MainActivity.kt" timestamp="1529893614022">
        <mark key="[" line="123" column="39" />
        <mark key="]" line="123" column="39" />
        <mark key="." line="123" column="39" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/forms/ListAdapter.kt" timestamp="1529893646582">
        <mark key="[" line="38" column="45" />
        <mark key="]" line="38" column="45" />
        <mark key="." line="38" column="45" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/main/res/values/colors.xml" timestamp="1529891855966">
        <mark key="[" line="4" column="17" />
        <mark key="]" line="4" column="16" />
        <mark key="^" line="4" column="16" />
        <mark key="." line="4" column="16" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/alerts/CheckBoxAlert.kt" timestamp="1529860053409">
        <mark key="[" line="36" column="32" />
        <mark key="]" line="36" column="32" />
        <mark key="^" line="28" column="31" />
        <mark key="." line="36" column="32" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/dev/res/values/colors.xml" timestamp="1529891846532">
        <mark key="[" line="1" column="0" />
        <mark key="]" line="1" column="0" />
        <mark key="." line="1" column="0" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/App.kt" timestamp="1529823711498">
        <mark key="[" line="13" column="34" />
        <mark key="]" line="13" column="34" />
        <mark key="^" line="13" column="16" />
        <mark key="." line="13" column="34" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/dev/res/values/styles.xml" timestamp="1529901703706">
        <mark key="[" line="53" column="0" />
        <mark key="]" line="53" column="0" />
        <mark key="." line="53" column="0" />
        <mark key="^" line="37" column="56" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/BindingAdapter.kt" timestamp="1529877284443">
        <mark key="a" line="31" column="6" />
        <mark key="'" line="23" column="11" />
        <mark key="[" line="29" column="0" />
        <mark key="]" line="29" column="62" />
        <mark key="^" line="47" column="8" />
        <mark key="." line="47" column="8" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/Prefs.kt" timestamp="1529868032738">
        <mark key="[" line="150" column="25" />
        <mark key="]" line="150" column="43" />
        <mark key="^" line="150" column="43" />
        <mark key="." line="150" column="43" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/NetworkVarianceAdapter.kt" timestamp="1529886849695">
        <mark key="[" line="8" column="37" />
        <mark key="]" line="8" column="37" />
        <mark key="^" line="8" column="36" />
        <mark key="." line="8" column="37" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/camera/CameraFragment.kt" timestamp="1529893699926">
        <mark key="[" line="18" column="28" />
        <mark key="]" line="18" column="28" />
        <mark key="." line="18" column="28" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/SpinnerAdapter.kt" timestamp="1529886537138">
        <mark key="[" line="41" column="18" />
        <mark key="]" line="41" column="18" />
        <mark key="^" line="41" column="18" />
        <mark key="." line="41" column="18" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/EnumSpinnerAdapter.kt" timestamp="1529872373376">
        <mark key="[" line="34" column="0" />
        <mark key="]" line="36" column="0" />
        <mark key="^" line="46" column="56" />
        <mark key="." line="34" column="0" />
      </file>
      <file name="$USER_HOME$/.gradle/caches/modules-2/files-2.1/androidx.drawerlayout/drawerlayout/1.0.0-alpha3/3091915df570eb2ff0a8e0298552cba023a9b0bc/drawerlayout-1.0.0-alpha3-sources.jar!/androidx/drawerlayout/widget/DrawerLayout.java" timestamp="1529900835143">
        <mark key="'" line="47" column="7" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/BaseFragment.kt" timestamp="1529901216759">
        <mark key="a" line="208" column="20" />
        <mark key="'" line="79" column="56" />
        <mark key="[" line="45" column="8" />
        <mark key="]" line="45" column="8" />
        <mark key="." line="45" column="37" />
        <mark key="^" line="45" column="62" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/LoggingLevelAdapter.kt" timestamp="1529892590554">
        <mark key="[" line="34" column="19" />
        <mark key="]" line="34" column="20" />
        <mark key="^" line="34" column="22" />
        <mark key="." line="34" column="19" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/DebugSettings.kt" timestamp="1529817480762">
        <mark key="[" line="124" column="27" />
        <mark key="]" line="124" column="28" />
        <mark key="^" line="124" column="26" />
        <mark key="." line="124" column="28" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/DrawerLayout.java" timestamp="1529900853520">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/forms/FormsFragment.kt" timestamp="1529893658399">
        <mark key="[" line="64" column="40" />
        <mark key="]" line="64" column="40" />
        <mark key="." line="64" column="40" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/NetworkDelayAdapter.kt" timestamp="1529886965553">
        <mark key="[" line="3" column="0" />
        <mark key="]" line="3" column="0" />
        <mark key="^" line="7" column="28" />
        <mark key="." line="3" column="0" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/model/db/Device.kt" timestamp="1529806209838">
        <mark key="[" line="6" column="0" />
        <mark key="]" line="6" column="0" />
        <mark key="." line="6" column="0" />
        <mark key="^" line="5" column="39" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/common/Prefs.kt" timestamp="1529859986198">
        <mark key="[" line="147" column="4" />
        <mark key="]" line="147" column="12" />
        <mark key="." line="147" column="12" />
        <mark key="^" line="147" column="12" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/StringResSpinnerAdapter.kt" timestamp="1529885178332">
        <mark key="[" line="8" column="0" />
        <mark key="]" line="8" column="0" />
        <mark key="^" line="5" column="29" />
        <mark key="." line="8" column="0" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/StringSpinnerAdapter.kt" timestamp="1529872672711">
        <mark key="[" line="30" column="5" />
        <mark key="]" line="31" column="3" />
        <mark key="^" line="31" column="3" />
        <mark key="." line="31" column="3" />
      </file>
      <file name="$USER_HOME$/android/samples/architecture/u2020/src/main/res/values/colors.xml" timestamp="1529891597100">
        <mark key="a" line="4" column="15" />
        <mark key="[" line="4" column="0" />
        <mark key="]" line="6" column="54" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/NonConsumingScrimInsetsFrameLayout.kt" timestamp="1529901028641">
        <mark key="[" line="60" column="0" />
        <mark key="]" line="60" column="32" />
        <mark key="^" line="60" column="12" />
        <mark key="." line="60" column="0" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/form/FormFragment.kt" timestamp="1529889233326">
        <mark key="[" line="254" column="15" />
        <mark key="]" line="254" column="15" />
        <mark key="^" line="254" column="19" />
        <mark key="." line="254" column="15" />
      </file>
      <file name="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/AnimationSpeedAdapter.kt" timestamp="1529872252272">
        <mark key="[" line="20" column="93" />
        <mark key="]" line="20" column="94" />
        <mark key="." line="20" column="94" />
        <mark key="^" line="20" column="94" />
      </file>
      <file name="/fragment.java" timestamp="1529900571466">
        <mark key="[" line="0" column="0" />
      </file>
    </filemarks>
    <jumps>
      <jump line="34" column="42" filename="$USER_HOME$/ccs/intake/versions.gradle" />
      <jump line="110" column="53" filename="$USER_HOME$/ccs/intake/versions.gradle" />
      <jump line="36" column="0" filename="$USER_HOME$/ccs/intake/versions.gradle" />
      <jump line="176" column="9" filename="$USER_HOME$/ccs/intake/versions.gradle" />
      <jump line="177" column="80" filename="$USER_HOME$/ccs/intake/versions.gradle" />
      <jump line="13" column="25" filename="$USER_HOME$/ccs/intake/versions.gradle" />
      <jump line="193" column="95" filename="$USER_HOME$/ccs/intake/versions.gradle" />
      <jump line="53" column="40" filename="$USER_HOME$/ccs/intake/versions.gradle" />
      <jump line="162" column="4" filename="$USER_HOME$/ccs/intake/app/build.gradle" />
      <jump line="50" column="37" filename="$USER_HOME$/ccs/intake/versions.gradle" />
      <jump line="52" column="19" filename="$USER_HOME$/ccs/intake/versions.gradle" />
      <jump line="180" column="69" filename="$USER_HOME$/ccs/intake/versions.gradle" />
      <jump line="181" column="70" filename="$USER_HOME$/ccs/intake/versions.gradle" />
      <jump line="182" column="65" filename="$USER_HOME$/ccs/intake/versions.gradle" />
      <jump line="184" column="70" filename="$USER_HOME$/ccs/intake/versions.gradle" />
      <jump line="187" column="9" filename="$USER_HOME$/ccs/intake/versions.gradle" />
      <jump line="188" column="64" filename="$USER_HOME$/ccs/intake/versions.gradle" />
      <jump line="189" column="67" filename="$USER_HOME$/ccs/intake/versions.gradle" />
      <jump line="190" column="76" filename="$USER_HOME$/ccs/intake/versions.gradle" />
      <jump line="191" column="79" filename="$USER_HOME$/ccs/intake/versions.gradle" />
      <jump line="192" column="85" filename="$USER_HOME$/ccs/intake/versions.gradle" />
      <jump line="232" column="54" filename="$USER_HOME$/ccs/intake/app/build.gradle" />
      <jump line="83" column="0" filename="$USER_HOME$/ccs/intake/app/build.gradle" />
      <jump line="142" column="47" filename="$USER_HOME$/ccs/intake/app/build.gradle" />
      <jump line="51" column="45" filename="$USER_HOME$/ccs/intake/versions.gradle" />
      <jump line="178" column="62" filename="$USER_HOME$/ccs/intake/versions.gradle" />
      <jump line="183" column="8" filename="$USER_HOME$/ccs/intake/versions.gradle" />
      <jump line="143" column="0" filename="$USER_HOME$/ccs/intake/app/build.gradle" />
      <jump line="172" column="49" filename="$USER_HOME$/ccs/intake/versions.gradle" />
      <jump line="99" column="13" filename="$USER_HOME$/ccs/intake/app/build.gradle" />
      <jump line="80" column="0" filename="$USER_HOME$/ccs/intake/app/build.gradle" />
      <jump line="151" column="4" filename="$USER_HOME$/ccs/intake/app/build.gradle" />
      <jump line="189" column="4" filename="$USER_HOME$/ccs/intake/app/build.gradle" />
      <jump line="150" column="11" filename="$USER_HOME$/ccs/intake/app/build.gradle" />
      <jump line="148" column="28" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/BaseFragment.kt" />
      <jump line="149" column="25" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/BaseFragment.kt" />
      <jump line="155" column="28" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/BaseFragment.kt" />
      <jump line="32" column="0" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/IntSpinnerAdapter.kt" />
      <jump line="33" column="26" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/IntSpinnerAdapter.kt" />
      <jump line="295" column="23" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/BaseFragment.kt" />
      <jump line="221" column="32" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/BaseFragment.kt" />
      <jump line="54" column="9" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/BindingAdapter.kt" />
      <jump line="22" column="11" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/BindingAdapter.kt" />
      <jump line="12" column="38" filename="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/MainViewModel.kt" />
      <jump line="256" column="40" filename="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/MainViewModel.kt" />
      <jump line="257" column="50" filename="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/MainViewModel.kt" />
      <jump line="258" column="50" filename="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/MainViewModel.kt" />
      <jump line="320" column="28" filename="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/MainViewModel.kt" />
      <jump line="335" column="22" filename="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/MainViewModel.kt" />
      <jump line="555" column="54" filename="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/MainViewModel.kt" />
      <jump line="562" column="16" filename="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/MainViewModel.kt" />
      <jump line="572" column="20" filename="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/MainViewModel.kt" />
      <jump line="574" column="20" filename="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/MainViewModel.kt" />
      <jump line="575" column="42" filename="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/MainViewModel.kt" />
      <jump line="579" column="16" filename="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/MainViewModel.kt" />
      <jump line="18" column="42" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/EnumCheckedListAdapter.kt" />
      <jump line="19" column="16" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/EnumCheckedListAdapter.kt" />
      <jump line="21" column="51" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/EnumCheckedListAdapter.kt" />
      <jump line="28" column="40" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/EnumCheckedListAdapter.kt" />
      <jump line="24" column="11" filename="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/MainActivity.kt" />
      <jump line="169" column="14" filename="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/MainActivity.kt" />
      <jump line="178" column="16" filename="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/MainActivity.kt" />
      <jump line="148" column="44" filename="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/scanner/ScannerFragment.kt" />
      <jump line="135" column="8" filename="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/scanner/ScannerFragment.kt" />
      <jump line="134" column="8" filename="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/scanner/ScannerFragment.kt" />
      <jump line="2" column="14" filename="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/scanner/ScannerFragment.kt" />
      <jump line="139" column="26" filename="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/scanner/ScannerFragment.kt" />
      <jump line="52" column="20" filename="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/ui/scanner/ScannerFragment.kt" />
      <jump line="14" column="0" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/NetworkDelayAdapter.kt" />
      <jump line="16" column="8" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/NetworkDelayAdapter.kt" />
      <jump line="19" column="8" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/NetworkDelayAdapter.kt" />
      <jump line="11" column="42" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/NetworkDelayAdapter.kt" />
      <jump line="8" column="71" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/ResSpinnerAdapter.kt" />
      <jump line="11" column="36" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/ResSpinnerAdapter.kt" />
      <jump line="15" column="28" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/ResSpinnerAdapter.kt" />
      <jump line="17" column="30" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/ResSpinnerAdapter.kt" />
      <jump line="19" column="46" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/ResSpinnerAdapter.kt" />
      <jump line="12" column="23" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/ResSpinnerAdapter.kt" />
      <jump line="10" column="51" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/IntResSpinnerAdapter.kt" />
      <jump line="30" column="26" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/adapters/SpinnerAdapter.kt" />
      <jump line="232" column="19" filename="$USER_HOME$/ccs/intake/app/src/main/java/monte/apps/kiosk/common/Permissions.kt" />
      <jump line="134" column="52" filename="$USER_HOME$/ccs/intake/app/build.gradle" />
      <jump line="119" column="33" filename="$USER_HOME$/ccs/intake/app/src/dev/res/layout/settings_dialog_fragment.xml" />
      <jump line="214" column="0" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/BaseFragment.kt" />
      <jump line="273" column="25" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/BaseFragment.kt" />
      <jump line="73" column="4" filename="$USER_HOME$/ccs/intake/app/src/dev/res/layout/settings_dialog_fragment.xml" />
      <jump line="432" column="46" filename="$USER_HOME$/.gradle/caches/modules-2/files-2.1/androidx.drawerlayout/drawerlayout/1.0.0-alpha3/3091915df570eb2ff0a8e0298552cba023a9b0bc/drawerlayout-1.0.0-alpha3-sources.jar!/androidx/drawerlayout/widget/DrawerLayout.java" />
      <jump line="48" column="7" filename="$USER_HOME$/.gradle/caches/modules-2/files-2.1/androidx.drawerlayout/drawerlayout/1.0.0-alpha3/3091915df570eb2ff0a8e0298552cba023a9b0bc/drawerlayout-1.0.0-alpha3-sources.jar!/androidx/drawerlayout/widget/DrawerLayout.java" />
      <jump line="49" column="7" filename="$USER_HOME$/.gradle/caches/modules-2/files-2.1/androidx.drawerlayout/drawerlayout/1.0.0-alpha3/3091915df570eb2ff0a8e0298552cba023a9b0bc/drawerlayout-1.0.0-alpha3-sources.jar!/androidx/drawerlayout/widget/DrawerLayout.java" />
      <jump line="50" column="7" filename="$USER_HOME$/.gradle/caches/modules-2/files-2.1/androidx.drawerlayout/drawerlayout/1.0.0-alpha3/3091915df570eb2ff0a8e0298552cba023a9b0bc/drawerlayout-1.0.0-alpha3-sources.jar!/androidx/drawerlayout/widget/DrawerLayout.java" />
      <jump line="51" column="7" filename="$USER_HOME$/.gradle/caches/modules-2/files-2.1/androidx.drawerlayout/drawerlayout/1.0.0-alpha3/3091915df570eb2ff0a8e0298552cba023a9b0bc/drawerlayout-1.0.0-alpha3-sources.jar!/androidx/drawerlayout/widget/DrawerLayout.java" />
      <jump line="64" column="0" filename="$USER_HOME$/.gradle/caches/modules-2/files-2.1/androidx.drawerlayout/drawerlayout/1.0.0-alpha3/3091915df570eb2ff0a8e0298552cba023a9b0bc/drawerlayout-1.0.0-alpha3-sources.jar!/androidx/drawerlayout/widget/DrawerLayout.java" />
      <jump line="17" column="8" filename="$USER_HOME$/.gradle/caches/modules-2/files-2.1/androidx.drawerlayout/drawerlayout/1.0.0-alpha3/3091915df570eb2ff0a8e0298552cba023a9b0bc/drawerlayout-1.0.0-alpha3-sources.jar!/androidx/drawerlayout/widget/DrawerLayout.java" />
      <jump line="19" column="14" filename="$USER_HOME$/.gradle/caches/modules-2/files-2.1/androidx.drawerlayout/drawerlayout/1.0.0-alpha3/3091915df570eb2ff0a8e0298552cba023a9b0bc/drawerlayout-1.0.0-alpha3-sources.jar!/androidx/drawerlayout/widget/DrawerLayout.java" />
      <jump line="47" column="7" filename="$USER_HOME$/.gradle/caches/modules-2/files-2.1/androidx.drawerlayout/drawerlayout/1.0.0-alpha3/3091915df570eb2ff0a8e0298552cba023a9b0bc/drawerlayout-1.0.0-alpha3-sources.jar!/androidx/drawerlayout/widget/DrawerLayout.java" />
      <jump line="45" column="38" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/BaseFragment.kt" />
      <jump line="396" column="70" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/BaseFragment.kt" />
      <jump line="397" column="30" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/BaseFragment.kt" />
      <jump line="400" column="18" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/BaseFragment.kt" />
      <jump line="79" column="56" filename="$USER_HOME$/ccs/intake/app/src/dev/java/monte/tools/settings/ui/BaseFragment.kt" />
    </jumps>
    <registers>
      <register name="&quot;" type="2">
        <text encoding="base64">ICAgICAgICA8aXRlbSBuYW1lPSJhbmRyb2lkOnRleHRDb2xvciI+P2FuZHJvaWQ6YXR0ci90ZXh0Q29sb3JQcmltYXJ5PC9pdGVtPgo=</text>
      </register>
      <register name="g" type="4">
        <keys>
          <key char="65535" code="27" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="71" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="96" code="0" mods="0" />
          <key char="49" code="0" mods="0" />
          <key char="71" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
        </keys>
      </register>
      <register name="k" type="4">
        <keys>
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="102" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="98" code="0" mods="0" />
          <key char="98" code="0" mods="0" />
          <key char="98" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="64" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="123" code="0" mods="0" />
          <key char="64" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="34" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="34" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="125" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="123" code="0" mods="0" />
          <key char="64" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="125" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="125" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
        </keys>
      </register>
      <register name="-" type="4">
        <text>00ff00</text>
      </register>
      <register name="/" type="4">
        <text>activity</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64">ICAgIDxpdGVtIG5hbWU9ImFuZHJvaWQ6dGV4dENvbG9yIj4/YW5kcm9pZDphdHRyL3RleHRDb2xvclNlY29uZGFyeTwvaXRlbT4K</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">ICAgICAgICA8aXRlbSBuYW1lPSJhbmRyb2lkOnRleHRDb2xvciI+P2FuZHJvaWQ6YXR0ci90ZXh0Q29sb3JQcmltYXJ5PC9pdGVtPgo=</text>
      </register>
      <register name="q" type="4">
        <text />
      </register>
      <register name="2" type="2">
        <text encoding="base64">ICAgICAgICA8aXRlbSBuYW1lPSJhbmRyb2lkOnRleHRDb2xvciI+P2FuZHJvaWQ6YXR0ci90ZXh0Q29sb3JQcmltYXJ5PC9pdGVtPgo=</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">ICAgIHByaXZhdGUgbGF0ZWluaXQgdmFyIGRyYXdlckxheW91dDogRHJhd2VyTGF5b3V0Cg==</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">ICAgIDxpdGVtIG5hbWU9ImFuZHJvaWQ6YmFja2dyb3VuZFRpbnQiPiMwMGZmMDA8L2l0ZW0+Cg==</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="u" type="4">
        <text />
      </register>
      <register name="6" type="2">
        <text encoding="base64">ICAgIGlpRgo=</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="w" type="4">
        <text />
      </register>
      <register name="8" type="2">
        <text encoding="base64">cGFja2FnZSBhbmRyb2lkeC5kcmF3ZXJsYXlvdXQud2lkZ2V0Owo=</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name=":" type="4">
        <text>'a,'bs/[ ]*\(.*\)\(deps.*\)/    println(&quot;\1'${\2}'&quot;)/</text>
      </register>
    </registers>
    <search>
      <last-search>activity</last-search>
      <last-offset />
      <last-pattern>activity</last-pattern>
      <last-replace encoding="base64">ICAgIHByaW50bG4oIlwxJyR7XDJ9JyIp</last-replace>
      <last-substitute>[ ]*\(.*\)\(deps.*\)</last-substitute>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry>item</entry>
        <entry>prin</entry>
        <entry>Timber</entry>
        <entry>print</entry>
        <entry>ailure</entry>
        <entry>error</entry>
        <entry encoding="base64">XDxmdW5cPg==</entry>
        <entry>context</entry>
        <entry>nullOffset</entry>
        <entry>getCurr</entry>
        <entry>anko</entry>
        <entry encoding="base64">cmV0dXJuIA==</entry>
        <entry>values</entry>
        <entry>lega</entry>
        <entry>Logging</entry>
        <entry>Loggin</entry>
        <entry>Regex</entry>
        <entry>Switch</entry>
        <entry>androidx</entry>
        <entry>activity</entry>
      </history-search>
      <history-cmd>
        <entry>%s/&quot;/\\&quot;/</entry>
        <entry>s/&quot;/\\&quot;/g</entry>
        <entry>W</entry>
        <entry>%s/Delay/Variance</entry>
        <entry>set ic</entry>
        <entry>q!</entry>
        <entry>%s/&quot;$/&quot;,/g</entry>
        <entry>'a,'bs%/imp/hello/</entry>
        <entry>'a,'bs/imp/xxx/g</entry>
        <entry>'a,'bs/deps.*$/${\0}/</entry>
        <entry>'a,'bs/\(^[ ]*\)\(.*\)/\1println(&quot;\2&quot;)/</entry>
        <entry>'a,'bs/\$/'/</entry>
        <entry>'a,'bs/\$/'$/</entry>
        <entry>'a,'bs/&quot;)/'&quot;)/</entry>
        <entry>'a,'bs/'/\\'/</entry>
        <entry>'a,'bs/'/\\'/g</entry>
        <entry>'a,'bs/\\//g</entry>
        <entry>w</entry>
        <entry>'a,'bs/[ ]*\(.*\)\(deps.*\)/    println(&quot;\1'${\2}'&quot;)/</entry>
        <entry>anko</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed U</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed W</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed X</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed M</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>shift ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed Y</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed O</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed E</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed OPEN_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed Q</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed H</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed CLOSE_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>shift ctrl pressed 6</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>